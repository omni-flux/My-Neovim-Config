
==============================================================================
blink.cmp:                                 require("blink.cmp.health").check()

System ~
- ✅ OK curl is installed
- ✅ OK git is installed
- ✅ OK Your system is supported by pre-built binaries (x86_64-pc-windows-msvc)
- ⚠️ WARNING blink_cmp_fuzzy lib is not downloaded/built

Sources ~
- ⚠️ WARNING Some providers may show up as "disabled" but are enabled dynamically (i.e. cmdline)

Default sources ~
- lsp (blink.cmp.sources.lsp)
- lazydev (lazydev.integrations.blink)
- snippets (blink.cmp.sources.snippets)
- path (blink.cmp.sources.path)

Disabled sources ~
- omni (blink.cmp.sources.complete_func)
- buffer (blink.cmp.sources.buffer)
- cmdline (blink.cmp.sources.cmdline)

==============================================================================
kickstart:                                 require("kickstart.health").check()

kickstart.nvim ~
- NOTE: Not every warning is a 'must-fix' in `:checkhealth`

    Fix only warnings for plugins and languages you intend to use.
      Mason will give warnings for languages that are not installed.
      You do not need to install, unless you want to use those languages!
- System Information: {
    machine = "x86_64",
    release = "10.0.26100",
    sysname = "Windows_NT",
    version = "Windows 11 Home Single Language"
  }
- ✅ OK Neovim version is: '0.11.1+v0.11.1'
- ✅ OK Found executable: 'git'
- ⚠️ WARNING Could not find executable: 'make'
- ⚠️ WARNING Could not find executable: 'unzip'
- ⚠️ WARNING Could not find executable: 'rg'

==============================================================================
lazy:                                           require("lazy.health").check()

lazy.nvim ~
- {lazy.nvim} version `11.17.1`
- ✅ OK {git} `version 2.46.2.windows.1`
- ✅ OK no existing packages found by other package managers
- ✅ OK packer_compiled.lua not found
- ❌ ERROR Issues were reported when loading your specs:
- ❌ ERROR Failed to load `custom.plugins.ColourMyPencil`
- ❌ ERROR 
- ❌ ERROR ...AppData/Local/nvim/lua/custom/plugins/ColourMyPencil.lua:3: Vim:E185: Cannot find color scheme 'darcubox'
- ❌ ERROR 
- ❌ ERROR # stacktrace:
- ❌ ERROR - lua/custom/plugins/ColourMyPencil.lua:3 _in_ **ColourMyPencil**
- ❌ ERROR - lua/custom/plugins/ColourMyPencil.lua:9 _in_ **load**
- ❌ ERROR - init.lua:247

luarocks ~
- checking `hererocks` installation
- ✅ OK no plugins require `luarocks`, so you can ignore any warnings below
- ⚠️ WARNING failed to get version of {python3}
  Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.

- ✅ OK {python} `Python 3.12.6`
- ❌ ERROR {C:/Users/ommka/AppData/Local/nvim-data/lazy-rocks/hererocks/bin/luarocks} not installed
- ⚠️ WARNING {C:/Users/ommka/AppData/Local/nvim-data/lazy-rocks/hererocks/bin/lua} version `5.1` not installed
- ⚠️ WARNING Lazy won't be able to install plugins that require `luarocks`.
  Here's what you can do:
   - fix your `luarocks` installation
   - disable *hererocks* with `opts.rocks.hererocks = false`
   - disable `luarocks` support completely with `opts.rocks.enabled = false`

==============================================================================
lspconfig:                                 require("lspconfig.health").check()

- Skipped. This healthcheck is redundant with `:checkhealth vim.lsp`.

==============================================================================
luasnip:                                     require("luasnip.health").check()

luasnip ~
- ⚠️ WARNING For Variable/Placeholder-transformations, luasnip requires
      the jsregexp library. See `:help |luasnip-lsp-snippets-transformations`| for advice
  

==============================================================================
mason:                                         require("mason.health").check()

mason.nvim ~
- ✅ OK mason.nvim version v2.0.0
- ✅ OK PATH: prepend
- ✅ OK Providers: 
    mason.providers.registry-api
    mason.providers.client
- ✅ OK neovim version >= 0.10.0

mason.nvim [Registries] ~
- ✅ OK Registry `github.com/mason-org/mason-registry version: 2025-06-05-blonde-wave` is installed.

mason.nvim [Core utils] ~
- ⚠️ WARNING unzip: not available
  - ADVICE:
    - spawn: unzip failed with exit code - and signal -. Could not find executable "unzip" in PATH.

- ⚠️ WARNING wget: not available
  - ADVICE:
    - spawn: wget failed with exit code - and signal -. Could not find executable "wget" in PATH.

- ✅ OK curl: `curl 8.12.1 (Windows) libcurl/8.12.1 Schannel zlib/1.3 WinIDN`
- ⚠️ WARNING gzip: not available
  - ADVICE:
    - spawn: gzip failed with exit code - and signal -. Could not find executable "gzip" in PATH.

- ✅ OK tar: `bsdtar 3.7.7 - libarchive 3.7.7 zlib/1.2.13.1-motley liblzma/5.4.3 bz2lib/1.0.8 libzstd/1.5.5 `
- ❌ ERROR pwsh: not available
  - ADVICE:
    - spawn: pwsh failed with exit code - and signal -. Could not find executable "pwsh" in PATH.

- ⚠️ WARNING 7z: not available
  - ADVICE:
    - spawn: 7z failed with exit code - and signal -. Could not find executable "7z" in PATH.


mason.nvim [Languages] ~
- ⚠️ WARNING luarocks: not available
  - ADVICE:
    - spawn: luarocks failed with exit code - and signal -. Could not find executable "luarocks" in PATH.

- ⚠️ WARNING Ruby: not available
  - ADVICE:
    - spawn: ruby failed with exit code - and signal -. Could not find executable "ruby" in PATH.

- ⚠️ WARNING RubyGem: not available
  - ADVICE:
    - spawn: gem failed with exit code - and signal -. Could not find executable "gem" in PATH.

- ⚠️ WARNING Composer: not available
  - ADVICE:
    - spawn: composer failed with exit code - and signal -. Could not find executable "composer" in PATH.

- ⚠️ WARNING PHP: not available
  - ADVICE:
    - spawn: php failed with exit code - and signal -. Could not find executable "php" in PATH.

- ✅ OK Go: `go version go1.24.2 windows/amd64`
- ✅ OK node: `v22.14.0`
- ⚠️ WARNING julia: not available
  - ADVICE:
    - spawn: julia failed with exit code - and signal -. Could not find executable "julia" in PATH.

- ✅ OK python: `Python 3.12.6`
- ✅ OK JAVA_HOME: `openjdk version "17.0.13" 2024-10-15`
- ✅ OK javac: `javac 17.0.13`
- ✅ OK cargo: `cargo 1.87.0 (99624be96 2025-05-06)`
- ✅ OK npm: `11.3.0`
- ✅ OK java: `java version "1.8.0_431"`
- ✅ OK pip: `pip 25.0.1 from C:\Users\ommka\AppData\Local\Programs\Python\Python312\Lib\site-packages\pip (python 3.12)`
- ✅ OK python venv: `Ok`

==============================================================================
mason-lspconfig:                     require("mason-lspconfig.health").check()

mason-lspconfig.nvim ~
- ✅ OK Neovim v0.11
- ✅ OK mason.nvim v2

==============================================================================
nvim-treesitter:                     require("nvim-treesitter.health").check()

Installation ~
- ⚠️ WARNING `tree-sitter` executable not found (parser generator, only needed for :TSInstallFromGrammar, not required for :TSInstall)
- ✅ OK `node` found v22.14.0 (only needed for :TSInstallFromGrammar)
- ✅ OK `git` executable found.
- ✅ OK `cc` executable found. Selected from { vim.NIL, "cc", "gcc", "clang", "cl", "zig" }
  Version: cc (Rev5, Built by MSYS2 project) 15.1.0
- ✅ OK Neovim was compiled with tree-sitter runtime ABI version 15 (required >=13). Parsers must be compatible with runtime ABI.

OS Info:
{
  machine = "x86_64",
  release = "10.0.26100",
  sysname = "Windows_NT",
  version = "Windows 11 Home Single Language"
} ~

Parser/Features         H L F I J
  - bash                ✓ ✓ ✓ . ✓
  - c                   ✓ ✓ ✓ ✓ ✓
  - cpp                 ✓ ✓ ✓ ✓ ✓
  - diff                ✓ . ✓ . ✓
  - git_config          ✓ . ✓ . ✓
  - gitignore           ✓ . . . ✓
  - html                ✓ ✓ ✓ ✓ ✓
  - ini                 ✓ . ✓ . ✓
  - json                ✓ ✓ ✓ ✓ .
  - lua                 ✓ ✓ ✓ ✓ ✓
  - luadoc              ✓ . . . .
  - markdown            ✓ . ✓ ✓ ✓
  - markdown_inline     ✓ . . . ✓
  - python              ✓ ✓ ✓ ✓ ✓
  - query               ✓ ✓ ✓ ✓ ✓
  - rust                ✓ ✓ ✓ ✓ ✓
  - vim                 ✓ ✓ ✓ . ✓
  - vimdoc              ✓ . . . ✓
  - xml                 ✓ ✓ ✓ ✓ ✓

  Legend: H[ighlight], L[ocals], F[olds], I[ndents], In[j]ections
         +) multiple parsers found, only one will be used
         x) errors found in the query, try to run :TSUpdate {lang} ~

==============================================================================
vim.deprecated:                       require("vim.deprecated.health").check()

 ~
- ⚠️ WARNING vim.validate is deprecated. Feature will be removed in Nvim 1.0
  - ADVICE:
    - use vim.validate(name, value, validator, optional_or_msg) instead.
    - stack traceback:
        C:/Users/ommka/AppData/Local/nvim-data/lazy/gitsigns.nvim/lua/gitsigns/system/compat.lua:293
        [C]:-1
        C:/Users/ommka/AppData/Local/nvim-data/lazy/gitsigns.nvim/lua/gitsigns/async.lua:307
        C:/Users/ommka/AppData/Local/nvim-data/lazy/gitsigns.nvim/lua/gitsigns/async.lua:317
        [C]:-1
        C:/Users/ommka/AppData/Local/nvim-data/lazy/lazy.nvim/lua/lazy/async.lua:113
        C:/Users/ommka/AppData/Local/nvim-data/lazy/lazy.nvim/lua/lazy/manage/process.lua:235
        C:/Users/ommka/AppData/Local/nvim-data/lazy/lazy.nvim/lua/lazy/health.lua:40
        C:/Users/ommka/AppData/Local/nvim-data/lazy/lazy.nvim/lua/lazy/health.lua:72
        equire("lazy.health").check():1
        [C]:-1
        C:/Users/ommka/neovim/runtime/lua/vim/health.lua:409
        nvim>:1

==============================================================================
vim.health:                               require("vim.health.health").check()

Configuration ~
- ✅ OK no issues found

Runtime ~
- ✅ OK $VIMRUNTIME: C:\Users\ommka\neovim\runtime

Performance ~
- ✅ OK Build type: Release

Remote Plugins ~
- ✅ OK Up to date

External Tools ~
- ⚠️ WARNING ripgrep not available

==============================================================================
vim.lsp:                                     require("vim.lsp.health").check()

- LSP log level : WARN
- Log path: C:/Users/ommka/AppData/Local/nvim-data/lsp.log
- Log size: 163 KB

vim.lsp: Active Clients ~
- No active clients

vim.lsp: Enabled Configurations ~
- ast_grep:
  - capabilities: {
      textDocument = {
        completion = {
          completionItem = {
            commitCharactersSupport = false,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            insertTextModeSupport = {
              valueSet = { 1 }
            },
            labelDetailsSupport = true,
            preselectSupport = false,
            resolveSupport = {
              properties = { "documentation", "detail", "additionalTextEdits", "command", "data" }
            },
            snippetSupport = true,
            tagSupport = {
              valueSet = { 1 }
            }
          },
          completionList = {
            itemDefaults = { "commitCharacters", "editRange", "insertTextFormat", "insertTextMode", "data" }
          },
          contextSupport = true,
          insertTextMode = 1
        }
      }
    }
  - cmd: { "ast-grep", "lsp" }
  - filetypes: c, cpp, rust, go, java, python, javascript, javascriptreact, javascript.jsx, typescript, typescriptreact, typescript.tsx, html, css, kotlin, dart, lua
  - reuse_client: <function @C:/Users/ommka/AppData/Local/nvim-data/lazy/nvim-lspconfig/lsp/ast_grep.lua:13>
  - root_markers: sgconfig.yaml, sgconfig.yml
  - workspace_required: true

- lua_ls:
  - capabilities: {
      textDocument = {
        completion = {
          completionItem = {
            commitCharactersSupport = false,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            insertTextModeSupport = {
              valueSet = { 1 }
            },
            labelDetailsSupport = true,
            preselectSupport = false,
            resolveSupport = {
              properties = { "documentation", "detail", "additionalTextEdits", "command", "data" }
            },
            snippetSupport = true,
            tagSupport = {
              valueSet = { 1 }
            }
          },
          completionList = {
            itemDefaults = { "commitCharacters", "editRange", "insertTextFormat", "insertTextMode", "data" }
          },
          contextSupport = true,
          insertTextMode = 1
        }
      }
    }
  - cmd: { "lua-language-server" }
  - filetypes: lua
  - root_markers: .luarc.json, .luarc.jsonc, .luacheckrc, .stylua.toml, stylua.toml, selene.toml, selene.yml, .git

- pyright:
  - capabilities: {
      textDocument = {
        completion = {
          completionItem = {
            commitCharactersSupport = false,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            insertTextModeSupport = {
              valueSet = { 1 }
            },
            labelDetailsSupport = true,
            preselectSupport = false,
            resolveSupport = {
              properties = { "documentation", "detail", "additionalTextEdits", "command", "data" }
            },
            snippetSupport = true,
            tagSupport = {
              valueSet = { 1 }
            }
          },
          completionList = {
            itemDefaults = { "commitCharacters", "editRange", "insertTextFormat", "insertTextMode", "data" }
          },
          contextSupport = true,
          insertTextMode = 1
        }
      }
    }
  - cmd: { "pyright-langserver", "--stdio" }
  - filetypes: python
  - on_attach: <function @C:/Users/ommka/AppData/Local/nvim-data/lazy/nvim-lspconfig/lsp/pyright.lua:43>
  - root_markers: pyproject.toml, setup.py, setup.cfg, requirements.txt, Pipfile, pyrightconfig.json, .git
  - settings: {
      python = {
        analysis = {
          autoSearchPaths = true,
          diagnosticMode = "openFilesOnly",
          useLibraryCodeForTypes = true
        }
      }
    }

- ruff:
  - capabilities: {
      textDocument = {
        completion = {
          completionItem = {
            commitCharactersSupport = false,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            insertTextModeSupport = {
              valueSet = { 1 }
            },
            labelDetailsSupport = true,
            preselectSupport = false,
            resolveSupport = {
              properties = { "documentation", "detail", "additionalTextEdits", "command", "data" }
            },
            snippetSupport = true,
            tagSupport = {
              valueSet = { 1 }
            }
          },
          completionList = {
            itemDefaults = { "commitCharacters", "editRange", "insertTextFormat", "insertTextMode", "data" }
          },
          contextSupport = true,
          insertTextMode = 1
        }
      }
    }
  - cmd: { "ruff", "server" }
  - filetypes: python
  - root_markers: pyproject.toml, ruff.toml, .ruff.toml, .git
  - settings: {}

- rust_analyzer:
  - before_init: <function @C:/Users/ommka/AppData/Local/nvim-data/lazy/nvim-lspconfig/lsp/rust_analyzer.lua:108>
  - capabilities: {
      experimental = {
        serverStatusNotification = true
      },
      textDocument = {
        completion = {
          completionItem = {
            commitCharactersSupport = false,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            insertTextModeSupport = {
              valueSet = { 1 }
            },
            labelDetailsSupport = true,
            preselectSupport = false,
            resolveSupport = {
              properties = { "documentation", "detail", "additionalTextEdits", "command", "data" }
            },
            snippetSupport = true,
            tagSupport = {
              valueSet = { 1 }
            }
          },
          completionList = {
            itemDefaults = { "commitCharacters", "editRange", "insertTextFormat", "insertTextMode", "data" }
          },
          contextSupport = true,
          insertTextMode = 1
        }
      }
    }
  - cmd: { "rust-analyzer" }
  - filetypes: rust
  - on_attach: <function @C:/Users/ommka/AppData/Local/nvim-data/lazy/nvim-lspconfig/lsp/rust_analyzer.lua:114>
  - root_dir: <function @C:/Users/ommka/AppData/Local/nvim-data/lazy/nvim-lspconfig/lsp/rust_analyzer.lua:57>

- ⚠️ WARNING 'sourcery' config not found. Ensure that vim.lsp.config('sourcery') was called.
- sourcery:

- ty:
  - capabilities: {
      textDocument = {
        completion = {
          completionItem = {
            commitCharactersSupport = false,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            insertTextModeSupport = {
              valueSet = { 1 }
            },
            labelDetailsSupport = true,
            preselectSupport = false,
            resolveSupport = {
              properties = { "documentation", "detail", "additionalTextEdits", "command", "data" }
            },
            snippetSupport = true,
            tagSupport = {
              valueSet = { 1 }
            }
          },
          completionList = {
            itemDefaults = { "commitCharacters", "editRange", "insertTextFormat", "insertTextMode", "data" }
          },
          contextSupport = true,
          insertTextMode = 1
        }
      }
    }
  - cmd: { "ty", "server" }
  - filetypes: python
  - root_markers: ty.toml, pyproject.toml, .git


vim.lsp: File Watcher ~
- file watching "(workspace/didChangeWatchedFiles)" disabled on all clients

vim.lsp: Position Encodings ~
- No active clients

==============================================================================
vim.provider:                           require("vim.provider.health").check()

Clipboard (optional) ~
- ✅ OK Clipboard tool found: win32yank

Node.js provider (optional) ~
- Node.js: v22.14.0

- ⚠️ WARNING Missing "neovim" npm (or yarn, pnpm) package.
  - ADVICE:
    - Run in shell: npm install -g neovim
    - Run in shell (if you use yarn): yarn global add neovim
    - Run in shell (if you use pnpm): pnpm install -g neovim
    - You may disable this provider (and warning) by adding `let g:loaded_node_provider = 0` to your init.vim

Perl provider (optional) ~
- ⚠️ WARNING No perl executable found
  - ADVICE:
    - See :help |provider-perl| for more information.
    - You can disable this provider (and warning) by adding `let g:loaded_perl_provider = 0` to your init.vim
- ⚠️ WARNING No usable perl executable found

Python 3 provider (optional) ~
- ⚠️ WARNING No Python executable found that can `import neovim`. Using the first available executable for diagnostics.
- ⚠️ WARNING Could not load Python :
  C:\msys64\mingw64\bin\python3.EXE does not have the "neovim" module.
  python3.13 not found in search path or not executable.
  C:\msys64\mingw64\bin\python3.12.EXE does not have the "neovim" module.
  python3.11 not found in search path or not executable.
  python3.10 not found in search path or not executable.
  python3.9 not found in search path or not executable.
  C:\Users\ommka\AppData\Local\Programs\Python\Python312\python.EXE does not have the "neovim" module.
  - ADVICE:
    - See :help |provider-python| for more information.
    - You can disable this provider (and warning) by adding `let g:loaded_python3_provider = 0` to your init.vim
- Executable: Not found

Python virtualenv ~
- ✅ OK no $VIRTUAL_ENV

Ruby provider (optional) ~
- ⚠️ WARNING `ruby` and `gem` must be in $PATH.
  - ADVICE:
    - Install Ruby and verify that `ruby` and `gem` commands work.

==============================================================================
vim.treesitter:                       require("vim.treesitter.health").check()

Treesitter features ~
- Treesitter ABI support: min 13, max 15
- WASM parser support: false

Treesitter parsers ~
- ✅ OK Parser: bash                 ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\bash.so
- ✅ OK Parser: c                    ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\c.so
- ✅ OK Parser: c                    ABI: 14, path: C:\Users\ommka\neovim\build\lib\nvim\parser\c.dll
- ✅ OK Parser: cpp                  ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\cpp.so
- ✅ OK Parser: diff                 ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\diff.so
- ✅ OK Parser: git_config           ABI: 13, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\git_config.so
- ✅ OK Parser: gitignore            ABI: 13, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\gitignore.so
- ✅ OK Parser: html                 ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\html.so
- ✅ OK Parser: ini                  ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\ini.so
- ✅ OK Parser: json                 ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\json.so
- ✅ OK Parser: lua                  ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\lua.so
- ✅ OK Parser: lua                  ABI: 14, path: C:\Users\ommka\neovim\build\lib\nvim\parser\lua.dll
- ✅ OK Parser: luadoc               ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\luadoc.so
- ✅ OK Parser: markdown             ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\markdown.so
- ✅ OK Parser: markdown             ABI: 14, path: C:\Users\ommka\neovim\build\lib\nvim\parser\markdown.dll
- ✅ OK Parser: markdown_inline      ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\markdown_inline.so
- ✅ OK Parser: markdown_inline      ABI: 14, path: C:\Users\ommka\neovim\build\lib\nvim\parser\markdown_inline.dll
- ✅ OK Parser: python               ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\python.so
- ✅ OK Parser: query                ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\query.so
- ✅ OK Parser: query                ABI: 14, path: C:\Users\ommka\neovim\build\lib\nvim\parser\query.dll
- ✅ OK Parser: rust                 ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\rust.so
- ✅ OK Parser: vim                  ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\vim.so
- ✅ OK Parser: vim                  ABI: 14, path: C:\Users\ommka\neovim\build\lib\nvim\parser\vim.dll
- ✅ OK Parser: vimdoc               ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\vimdoc.so
- ✅ OK Parser: vimdoc               ABI: 14, path: C:\Users\ommka\neovim\build\lib\nvim\parser\vimdoc.dll
- ✅ OK Parser: xml                  ABI: 14, path: C:\Users\ommka\AppData\Local\nvim-data\lazy\nvim-treesitter\parser\xml.so

